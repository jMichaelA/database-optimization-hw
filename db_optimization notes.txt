------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
problem 1 base query
    HashAggregate  (cost=1559.25..1559.29 rows=4 width=12) Group Key: m.namefirst, m.namelast
      ->  Nested Loop  (cost=1540.37..1559.23 rows=4 width=12)
        ->  Merge Join  (cost=1540.08..1550.08 rows=4 width=9)
              Merge Cond: (((a.teamid)::text = (t.teamid)::text) AND ((a.lgid)::text = (t.lgid)::text) AND (a.yearid = t.yearid))
            ->  Merge Join  (cost=1540.08..1550.08 rows=4 width=9)
                Merge Cond: (((a.teamid)::text = (t.teamid)::text) AND ((a.lgid)::text = (t.lgid)::text) AND (a.yearid = t.yearid))->  Sort  (cost=1420.84..1423.24 rows=960 width=20)
    a: pitching
    t: teams
    m: master

the biggest cost is on the join on teamid, lgid, and yearid

problem 1 query with index on pitching.teamid, pitching.yearid, teams.teamid, teams.yearid

    HashAggregate  (cost=851.40..851.44 rows=4 width=12) Group Key: m.namefirst, m.namelast
    ->  Nested Loop  (cost=12.64..851.38 rows=4 width=12)
        ->  Nested Loop  (cost=12.35..842.24 rows=4 width=9)
              ->  Seq Scan on teams t  (cost=0.00..118.31 rows=36 width=11)
                    Filter: ((name)::text ~~ 'Montreal Expos'::text)
              ->  Bitmap Heap Scan on pitching a  (cost=12.35..20.10 rows=1 width=20)
                    Recheck Cond: (((teamid)::text = (t.teamid)::text) AND (yearid = t.yearid))
                    Filter: ((w > 20) AND ((t.lgid)::text = (lgid)::text))
                    ->  BitmapAnd  (cost=12.35..12.35 rows=2 width=0)
                          ->  Bitmap Index Scan on pitching_teamid_idx  (cost=0.00..6.02 rows=290 width=0)
                                Index Cond: ((teamid)::text = (t.teamid)::text)
                          ->  Bitmap Index Scan on pitching_yearid_idx  (cost=0.00..6.08 rows=298 width=0)
                                Index Cond: (yearid = t.yearid)
    improvements:
        cost decreased by: 1559-851 = 708
        

problem 2 base query

Sort  (cost=158.07..158.20 rows=52 width=24)
  Sort Key: batting.yearid
  ->  Nested Loop  (cost=141.81..156.59 rows=52 width=24)
        ->  Nested Loop  (cost=141.39..146.95 rows=9 width=30)
              ->  HashAggregate  (cost=141.10..141.19 rows=9 width=9)
                    Group Key: (schoolsplayers.masterid)::text
                    ->  Hash Semi Join  (cost=18.38..141.08 rows=9 width=9)
                          Hash Cond: ((schoolsplayers.schoolid)::text = (schools.schoolid)::text)
                          ->  Seq Scan on schoolsplayers  (cost=0.00..106.47 rows=6147 width=17)
                          ->  Hash  (cost=18.36..18.36 rows=1 width=9)
                                ->  Seq Scan on schools  (cost=0.00..18.36 rows=1 width=9)
                                      Filter: ((schoolname)::text ~~ '%Utah State%'::text)
              ->  Index Scan using master_pkey on master  (cost=0.29..0.63 rows=1 width=21)
                    Index Cond: ((masterid)::text = (schoolsplayers.masterid)::text)
        ->  Index Scan using batting_pkey on batting  (cost=0.42..1.00 rows=6 width=21)
              Index Cond: ((masterid)::text = (master.masterid)::text)
              Filter: ((ab IS NOT NULL) AND (ab > 0))
              
              
problem 2 with index on public.schoolsplayers


Sort  (cost=63.62..63.75 rows=52 width=24)
  Sort Key: batting.yearid
  ->  Nested Loop  (cost=47.57..62.14 rows=52 width=24)
        ->  Nested Loop  (cost=47.15..52.71 rows=9 width=30)
              ->  HashAggregate  (cost=46.86..46.95 rows=9 width=9)
                    Group Key: (schoolsplayers.masterid)::text
                    ->  Nested Loop  (cost=4.35..46.84 rows=9 width=9)
                          ->  Seq Scan on schools  (cost=0.00..18.36 rows=1 width=9)
                                Filter: ((schoolname)::text ~~ '%Utah State%'::text)
                          ->  Bitmap Heap Scan on schoolsplayers  (cost=4.35..28.39 rows=9 width=17)
                                Recheck Cond: ((schoolid)::text = (schools.schoolid)::text)
                                ->  Bitmap Index Scan on schoolp  (cost=0.00..4.35 rows=9 width=0)
                                      Index Cond: ((schoolid)::text = (schools.schoolid)::text)
              ->  Index Scan using master_pkey on master  (cost=0.29..0.63 rows=1 width=21)
                    Index Cond: ((masterid)::text = (schoolsplayers.masterid)::text)
        ->  Index Scan using bmid on batting  (cost=0.42..0.97 rows=6 width=21)
              Index Cond: ((masterid)::text = (master.masterid)::text)
              Filter: ((ab IS NOT NULL) AND (ab > 0))


    improvements:
        cost decreased by: 158 - 63 = 95




problem 3 base query 

    HashAggregate  (cost=6493.57..6540.87 rows=4730 width=36) Group Key: jeter.masterid, jetert.masterid, jeterty.masterid, jetertt.masterid
     ->  Nested Loop  (cost=3383.74..6446.27 rows=4730 width=36)
        Join Filter: ((jetertt.masterid)::text <> (jeter.masterid)::text)
        ->  Hash Join  (cost=3383.32..6178.26 rows=423 width=38)
              Hash Cond: ((jeterty.masterid)::text = (jetert.masterid)::text)
              Join Filter: ((jeter.teamid)::text <> (jeterty.teamid)::text)
              ->  Seq Scan on appearances jeterty  (cost=0.00..2421.46 rows=98146 width=20)
              ->  Hash  (cost=3382.62..3382.62 rows=56 width=22)
                    ->  Nested Loop  (cost=0.83..3382.62 rows=56 width=22)
                          ->  Nested Loop  (cost=0.42..3379.46 rows=5 width=20)
                                ->  Seq Scan on master m  (cost=0.00..676.31 rows=1 width=9)
                                      Filter: (((namelast)::text = 'Jeter'::text) AND ((namefirst)::text = 'Derek'::text))
                                ->  Index Scan using appearances_pkey on appearances jeter  (cost=0.42..2703.08 rows=7 width=20)
                                      Index Cond: ((masterid)::text = (m.masterid)::text)
                          ->  Index Scan using appearances_pkey on appearances jetert  (cost=0.42..0.62 rows=1 width=20)
                                Index Cond: ((yearid = jeter.yearid) AND ((teamid)::text = (jeter.teamid)::text))
                                Filter: (((jeter.masterid)::text <> (masterid)::text) AND ((jeter.lgid)::text = (lgid)::text))

    m: master
    jeter: appearances
    jeterT: appearances
    jetterTT: appearances

problem 3 query with index on appearances.masterid

    HashAggregate  (cost=1065.23..1112.53 rows=4730 width=36) Group Key: jeter.masterid, jetert.masterid, jeterty.masterid, jetertt.masterid
       ->  Nested Loop  (cost=5.72..1017.93 rows=4730 width=36)
        Join Filter: ((jetertt.masterid)::text <> (jeter.masterid)::text)
        ->  Nested Loop  (cost=5.31..749.92 rows=423 width=38)
              Join Filter: ((jeter.teamid)::text <> (jeterty.teamid)::text)
              ->  Nested Loop  (cost=4.89..710.63 rows=56 width=22)
                    ->  Nested Loop  (cost=4.47..707.48 rows=5 width=20)
                          ->  Seq Scan on master m  (cost=0.00..676.31 rows=1 width=9)
                                Filter: (((namelast)::text = 'Jeter'::text) AND ((namefirst)::text = 'Derek'::text))
                          ->  Bitmap Heap Scan on appearances jeter  (cost=4.47..31.10 rows=7 width=20)
                                Recheck Cond: ((masterid)::text = (m.masterid)::text)
                                ->  Bitmap Index Scan on appearances_masterid_idx  (cost=0.00..4.47 rows=7 width=0)
                                      Index Cond: ((masterid)::text = (m.masterid)::text)
                    ->  Index Scan using appearances_pkey on appearances jetert  (cost=0.42..0.62 rows=1 width=20)
                          Index Cond: ((yearid = jeter.yearid) AND ((teamid)::text = (jeter.teamid)::text))
                          Filter: (((jeter.masterid)::text <> (masterid)::text) AND ((jeter.lgid)::text = (lgid)::text))
              ->  Index Scan using appearances_masterid_idx on appearances jeterty  (cost=0.42..0.61 rows=7 width=20)
                    Index Cond: ((masterid)::text = (jetert.masterid)::text)

    improvements:
        cost decreased by: 6493 - 1065 = 5428
        

-- 
question 4 base query







-- 
question 5 base query

Nested Loop  (cost=28303.72..33573.45 rows=1 width=40)
  Join Filter: ((batting_1.yearid = batting_2.yearid) AND ((batting_1.teamid)::text = (batting_2.teamid)::text) AND ((batting_1.lgid)::text = (batting_2.lgid)::text) AND ((((count(batting.masterid)) / NULLIF((count(batting_2.masterid)), 0)))::numeric >= 0.75))
  ->  Nested Loop  (cost=24881.23..29717.00 rows=1 width=47)
        ->  GroupAggregate  (cost=24880.95..29675.35 rows=5 width=20)
              ->  Merge Join  (cost=24880.95..29675.25 rows=5 width=20)
                    Merge Cond: (((batting.teamid)::text = (batting_1.teamid)::text) AND (batting.yearid = batting_1.yearid) AND ((batting.lgid)::text = (batting_1.lgid)::text))
                    Join Filter: (((sum(batting_1.h) / NULLIF(sum(batting_1.ab), 0))) >= ((sum(batting.h) / NULLIF(sum(batting.ab), 0))))
                    ->  GroupAggregate  (cost=12968.33..15376.05 rows=13681 width=28)
                          ->  Sort  (cost=12968.33..13213.05 rows=97889 width=28)
                                Sort Key: batting.teamid, batting.yearid, batting.lgid, batting.masterid
                                ->  Seq Scan on batting  (cost=0.00..2508.89 rows=97889 width=28)
                    ->  Materialize  (cost=11912.62..13991.06 rows=9136 width=19)
                          ->  GroupAggregate  (cost=11912.62..13876.86 rows=9136 width=19)
                                ->  Sort  (cost=11912.62..12141.02 rows=91360 width=19)
                                      Sort Key: batting_1.teamid, batting_1.yearid, batting_1.lgid
                                      ->  Seq Scan on batting batting_1  (cost=0.00..2508.89 rows=91360 width=19)
                                            Filter: (ab IS NOT NULL)
        ->  Index Scan using teams_pkey on teams  (cost=0.28..8.31 rows=1 width=28)
              Index Cond: ((yearid = batting_1.yearid) AND ((lgid)::text = (batting_1.lgid)::text) AND ((teamid)::text = (batting_1.teamid)::text))
  ->  HashAggregate  (cost=3422.49..3513.85 rows=9136 width=20)
        ->  Seq Scan on batting batting_2  (cost=0.00..2508.89 rows=91360 width=20)
              Filter: (ab IS NOT NULL)

Notes:
  I tried adding some indexes on the batting table, but found no change in performance.
  After looking through the query I found that there was 4 instances where sum was not needed so getting rid of that increased performance slightly

after done with modified query

SELECT 
    C.yearID as year,
    name as teamName,
    C.lgID as league,
    D.cnt as totalBatters,
    C.cnt as aboveAverageBatters
FROM
    (SELECT 
        count(masterID) as cnt, A.yearID, A.teamID, A.lgID
    FROM
        (select 
        masterID,
            teamID,
            yearID,
            lgID,
      --      sum(AB), ******** removed ********
      --      sum(H), ******** removed ********
            sum(H) / NULLIF(sum(AB),0) as avg
    FROM
        batting
    GROUP BY teamID , yearID , lgID , masterID
    ) B, (select 
        teamID,
            yearID,
            lgID,
      --      sum(AB), ******** removed ********
      --      sum(H), ******** removed ********
            sum(H) / NULLIF(sum(AB), 0) as avg
    FROM
        batting
    WHERE ab is not null
    GROUP BY teamID , yearID , lgID
    ) A
    WHERE
        A.avg >= B.avg AND A.teamID = B.teamID
            AND A.yearID = B.yearID
            AND A.lgID = B.lgID
    GROUP BY A.teamID , A.yearID , A.lgID
    ) C,
    (SELECT 
        count(masterID) as cnt, yearID, teamID, lgID
    FROM
        batting
    WHERE ab is not null
    GROUP BY yearID , teamID , lgID) D, 
    teams
WHERE
    C.cnt / NULLIF(D.cnt, 0) >= 0.75
        AND C.yearID = D.yearID
        AND C.teamID = D.teamID
        AND C.lgID = D.lgID
        AND teams.yearID = C.yearID
        AND teams.lgID = C.lgID
        AND teams.teamID = C.teamID

-- query after change

Nested Loop  (cost=20871.42..23596.10 rows=1 width=40)
  Join Filter: ((a.yearid = batting_2.yearid) AND ((a.teamid)::text = (batting_2.teamid)::text) AND ((a.lgid)::text = (batting_2.lgid)::text) AND ((((count(batting.masterid)) / NULLIF((count(batting_2.masterid)), 0)))::numeric >= 0.75))
  ->  Nested Loop  (cost=17448.93..19739.65 rows=1 width=47)
        ->  GroupAggregate  (cost=17448.65..19698.00 rows=5 width=20)
              ->  Merge Join  (cost=17448.65..19697.90 rows=5 width=20)
                    Merge Cond: (((batting.teamid)::text = (a.teamid)::text) AND (batting.yearid = a.yearid) AND ((batting.lgid)::text = (a.lgid)::text))
                    Join Filter: (a.avg >= ((sum(batting.h) / NULLIF(sum(batting.ab), 0))))
                    ->  GroupAggregate  (cost=12968.33..14886.60 rows=13681 width=28)
                          ->  Sort  (cost=12968.33..13213.05 rows=97889 width=28)
                                Sort Key: batting.teamid, batting.yearid, batting.lgid, batting.masterid
                                ->  Seq Scan on batting  (cost=0.00..2508.89 rows=97889 width=28)
                    ->  Sort  (cost=4480.32..4503.16 rows=9136 width=19)
                          Sort Key: a.teamid, a.yearid, a.lgid
                          ->  Subquery Scan on a  (cost=3650.89..3879.29 rows=9136 width=19)
                                ->  HashAggregate  (cost=3650.89..3787.93 rows=9136 width=19)
                                      ->  Seq Scan on batting batting_1  (cost=0.00..2508.89 rows=91360 width=19)
                                            Filter: (ab IS NOT NULL)
        ->  Index Scan using teams_pkey on teams  (cost=0.28..8.31 rows=1 width=28)
              Index Cond: ((yearid = a.yearid) AND ((lgid)::text = (a.lgid)::text) AND ((teamid)::text = (a.teamid)::text))
  ->  HashAggregate  (cost=3422.49..3513.85 rows=9136 width=20)
        ->  Seq Scan on batting batting_2  (cost=0.00..2508.89 rows=91360 width=20)
              Filter: (ab IS NOT NULL)

improvement:
  cost improvement: 28303 - 20871 = 7432


-- 
question 6 base query

Unique  (cost=6606.17..6606.18 rows=1 width=12)
  ->  Sort  (cost=6606.17..6606.18 rows=1 width=12)
        Sort Key: master.namelast, master.namefirst
        ->  Nested Loop  (cost=4798.34..6606.16 rows=1 width=12)
              ->  Nested Loop  (cost=4798.05..6605.83 rows=1 width=36)
                    ->  Nested Loop  (cost=4797.35..6597.17 rows=1 width=31)
                          ->  Nested Loop  (cost=4797.07..6596.85 rows=1 width=42)
                                Join Filter: ((b.masterid)::text = (b_2.masterid)::text)
                                ->  Nested Loop  (cost=4796.65..6596.31 rows=1 width=22)
                                      ->  Nested Loop  (cost=4796.37..6583.87 rows=39 width=33)
                                            ->  Hash Join  (cost=4795.95..6054.69 rows=994 width=13)
                                                  Hash Cond: (((t.teamid)::text = (b.teamid)::text) AND (t.yearid = b.yearid) AND ((t.lgid)::text = (b.lgid)::text))
                                                  ->  Seq Scan on teams t  (cost=0.00..118.31 rows=101 width=11)
                                                        Filter: ((name)::text ~~ '%New York Yankees%'::text)
                                                  ->  Hash  (cost=2508.89..2508.89 rows=97889 width=20)
                                                        ->  Seq Scan on batting b  (cost=0.00..2508.89 rows=97889 width=20)
                                            ->  Index Scan using batting_pkey on batting b_1  (cost=0.42..0.52 rows=1 width=20)
                                                  Index Cond: (((masterid)::text = (b.masterid)::text) AND (yearid = (b.yearid + 1)))
                                      ->  Index Scan using teams_pkey on teams t_1  (cost=0.28..0.31 rows=1 width=11)
                                            Index Cond: ((yearid = b_1.yearid) AND ((lgid)::text = (b_1.lgid)::text) AND ((teamid)::text = (b_1.teamid)::text))
                                            Filter: ((name)::text ~~ '%New York Yankees%'::text)
                                ->  Index Scan using batting_pkey on batting b_2  (cost=0.42..0.52 rows=1 width=20)
                                      Index Cond: (((masterid)::text = (b_1.masterid)::text) AND (yearid = (b_1.yearid + 1)))
                          ->  Index Scan using teams_pkey on teams t_2  (cost=0.28..0.31 rows=1 width=11)
                                Index Cond: ((yearid = b_2.yearid) AND ((lgid)::text = (b_2.lgid)::text) AND ((teamid)::text = (b_2.teamid)::text))
                                Filter: ((name)::text ~~ '%New York Yankees%'::text)
                    ->  Nested Loop  (cost=0.70..8.65 rows=1 width=17)
                          Join Filter: ((b_2.yearid + 1) = b_3.yearid)
                          ->  Index Scan using teamyear on teams t_3  (cost=0.28..0.67 rows=1 width=11)
                                Index Cond: (yearid = (b_2.yearid + 1))
                                Filter: ((name)::text ~~ '%New York Yankees%'::text)
                          ->  Index Scan using batting_pkey on batting b_3  (cost=0.42..7.97 rows=1 width=20)
                                Index Cond: (((masterid)::text = (b.masterid)::text) AND (yearid = t_3.yearid))
                                Filter: (((t_3.teamid)::text = (teamid)::text) AND ((t_3.lgid)::text = (lgid)::text))
              ->  Index Scan using master_pkey on master  (cost=0.29..0.32 rows=1 width=21)
                    Index Cond: ((masterid)::text = (b.masterid)::text)
                    
                    
                    
problem 6 query with indices on: 
                        CREATE INDEX byear ON public.batting (yearid); 	 
                    CREATE INDEX battingID ON public.batting (teamid);                   



Unique  (cost=4791.42..4791.43 rows=1 width=12)
  ->  Sort  (cost=4791.42..4791.42 rows=1 width=12)
        Sort Key: master.namelast, master.namefirst
        ->  Nested Loop  (cost=4364.07..4791.41 rows=1 width=12)
              ->  Nested Loop  (cost=4363.78..4791.07 rows=1 width=36)
                    ->  Nested Loop  (cost=4363.08..4782.41 rows=1 width=31)
                          ->  Nested Loop  (cost=4362.80..4782.10 rows=1 width=42)
                                Join Filter: ((b.masterid)::text = (b_2.masterid)::text)
                                ->  Nested Loop  (cost=4362.38..4781.56 rows=1 width=22)
                                      Join Filter: (((t_1.teamid)::text = (b_1.teamid)::text) AND (t_1.yearid = b_1.yearid) AND ((t_1.lgid)::text = (b_1.lgid)::text))
                                      ->  Hash Join  (cost=4361.96..4510.54 rows=502 width=24)
                                            Hash Cond: (t_1.yearid = (b.yearid + 1))
                                            ->  Seq Scan on teams t_1  (cost=0.00..118.31 rows=101 width=11)
                                                  Filter: ((name)::text ~~ '%New York Yankees%'::text)
                                            ->  Hash  (cost=4349.53..4349.53 rows=994 width=13)
                                                  ->  Nested Loop  (cost=22.65..4349.53 rows=994 width=13)
                                                        ->  Seq Scan on teams t  (cost=0.00..118.31 rows=101 width=11)
                                                              Filter: ((name)::text ~~ '%New York Yankees%'::text)
                                                        ->  Bitmap Heap Scan on batting b  (cost=22.65..41.88 rows=1 width=20)
                                                              Recheck Cond: (((teamid)::text = (t.teamid)::text) AND (yearid = t.yearid))
                                                              Filter: ((t.lgid)::text = (lgid)::text)
                                                              ->  BitmapAnd  (cost=22.65..22.65 rows=5 width=0)
                                                                    ->  Bitmap Index Scan on battingid  (cost=0.00..11.11 rows=661 width=0)
                                                                          Index Cond: ((teamid)::text = (t.teamid)::text)
                                                                    ->  Bitmap Index Scan on byear  (cost=0.00..11.29 rows=685 width=0)
                                                                          Index Cond: (yearid = t.yearid)
                                      ->  Index Scan using batting_pkey on batting b_1  (cost=0.42..0.52 rows=1 width=20)
                                            Index Cond: (((masterid)::text = (b.masterid)::text) AND (yearid = (b.yearid + 1)))
                                ->  Index Scan using batting_pkey on batting b_2  (cost=0.42..0.52 rows=1 width=20)
                                      Index Cond: (((masterid)::text = (b_1.masterid)::text) AND (yearid = (b_1.yearid + 1)))
                          ->  Index Scan using teams_pkey on teams t_2  (cost=0.28..0.31 rows=1 width=11)
                                Index Cond: ((yearid = b_2.yearid) AND ((lgid)::text = (b_2.lgid)::text) AND ((teamid)::text = (b_2.teamid)::text))
                                Filter: ((name)::text ~~ '%New York Yankees%'::text)
                    ->  Nested Loop  (cost=0.70..8.65 rows=1 width=17)
                          Join Filter: ((b_2.yearid + 1) = b_3.yearid)
                          ->  Index Scan using teams_yearid_idx on teams t_3  (cost=0.28..0.67 rows=1 width=11)
                                Index Cond: (yearid = (b_2.yearid + 1))
                                Filter: ((name)::text ~~ '%New York Yankees%'::text)
                          ->  Index Scan using batting_pkey on batting b_3  (cost=0.42..7.97 rows=1 width=20)
                                Index Cond: (((masterid)::text = (b.masterid)::text) AND (yearid = t_3.yearid))
                                Filter: (((t_3.teamid)::text = (teamid)::text) AND ((t_3.lgid)::text = (lgid)::text))
              ->  Index Scan using master_pkey on master  (cost=0.29..0.32 rows=1 width=21)
                    Index Cond: ((masterid)::text = (b.masterid)::text)


improvement:
  cost improvement: 6606 - 4791 = 1815


-- 
question 7 base query

Nested Loop  (cost=1616.76..1667.75 rows=1 width=44)
  ->  Merge Join  (cost=1616.48..1667.25 rows=1 width=38)
        Merge Cond: ((a.yearid = ((b.yearid + 1))) AND ((a.teamid)::text = (b.teamid)::text) AND ((a.lgid)::text = (b.lgid)::text))
        Join Filter: ((a.s * '2'::double precision) <= b.s)
        ->  Sort  (cost=808.24..813.32 rows=2030 width=19)
              Sort Key: a.yearid, a.teamid, a.lgid
              ->  Subquery Scan on a  (cost=656.12..696.72 rows=2030 width=19)
                    ->  HashAggregate  (cost=656.12..676.42 rows=2030 width=19)
                          Group Key: salaries.yearid, salaries.teamid, salaries.lgid
                          ->  Seq Scan on salaries  (cost=0.00..416.56 rows=23956 width=19)
        ->  Sort  (cost=808.24..813.32 rows=2030 width=19)
              Sort Key: ((b.yearid + 1)), b.teamid, b.lgid
              ->  Subquery Scan on b  (cost=656.12..696.72 rows=2030 width=19)
                    ->  HashAggregate  (cost=656.12..676.42 rows=2030 width=19)
                          Group Key: salaries_1.yearid, salaries_1.teamid, salaries_1.lgid
                          ->  Seq Scan on salaries salaries_1  (cost=0.00..416.56 rows=23956 width=19)
  ->  Index Scan using teams_pkey on teams  (cost=0.28..0.49 rows=1 width=28)
        Index Cond: ((yearid = a.yearid) AND ((lgid)::text = (a.lgid)::text) AND ((teamid)::text = (a.teamid)::text))
        
Things I have tried to reduce the cost:

CREATE INDEX teamid ON public.salaries (teamid);  	//nothing                   
CREATE INDEX yearid ON public.salaries (yearid); 	//nothing                     
CREATE INDEX lgid ON public.salaries (lgid);		//nothing        			  
CREATE INDEX salary ON public.salaries (salary);	//nothing                     

CREATE INDEX tteamid ON public.teams (teamid); 	    //nothing                   
CREATE INDEX tyearid ON public.teams (yearid);	    //nothing                     
CREATE INDEX tlgid ON public.teams (lgid);			//nothing
CREATE INDEX tname ON public.teams (name);			//nothing                     

I deleted the line: AND teams.lgID = A.lgID
and that didn't lower the cost and still gives the same result. 



        


